name: pre-and-post-merge

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  GO_VERSION: "1.20"
  CRI_DOCKERD_VERSION: "0.3.1"
  CRI_DOCKERD_DEB_VERSION: "0.3.1.3-0"

jobs:
  test-unit:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v3
      with:
        go-version: ^${{ env.GO_VERSION }}
    - uses: actions/checkout@v3
      name: Check out code into the Go module directory
      with:
        fetch-depth: 0
    - name: Unit Tests
      run: make test
    - name: Codecov
      uses: codecov/codecov-action@v3
      with:
        file: cover-unit.out
        flags: unit-tests
        name: codecov-unit-test

  test-integration-containerd:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v3
      with:
        go-version: ^${{ env.GO_VERSION }}
    - uses: actions/checkout@v3
      name: Check out code into the Go module directory
      with:
        fetch-depth: 0
    - name: Setup containerd cluster
      env:
        CRI_SOCKET_INIT_ARG: "--cri-socket unix:///run/containerd/containerd.sock"
      run: |
        set -x
        # Ensure dockerd isn't running
        sudo systemctl stop docker.socket
        sudo systemctl stop docker
        sudo rm -f /var/run/docker.sock
        sudo ctr version
        ./.github/workflows/cluster-init.sh
    - name: Run integration tests
      run: make integration EXTRA_GO_TEST_FLAGS=-v
    - name: Gather integration coverage results
      uses: codecov/codecov-action@v3
      with:
        file: cover-int.out
        flags: integration-tests
        name: codecov-integration-test-containerd

  test-integration-dockerd:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v3
      with:
        go-version: ^${{ env.GO_VERSION }}
    - uses: actions/checkout@v3
      name: Check out code into the Go module directory
      with:
        fetch-depth: 0
    - name: Setup kubeadm cluster with default docker runtime
      env:
        CRI_SOCKET_INIT_ARG: "--cri-socket unix:///var/run/cri-dockerd.sock"
      run: |
        set -x
        # Install cri-dockerd
        curl -fsSLo /tmp/cri-dockerd.amd64.deb https://github.com/Mirantis/cri-dockerd/releases/download/v${CRI_DOCKERD_VERSION}/cri-dockerd_${CRI_DOCKERD_DEB_VERSION}.ubuntu-jammy_amd64.deb
        # Note, package deps in cri-dockerd missing moby-containerd as option
        sudo dpkg --force-depends -i /tmp/cri-dockerd.amd64.deb
        # Note: Default docker setup (cgroupfs) is incompatible with default kubelet (systemd) so one has to be changed
        #       since k8s recommends against cgroupfs, we'll use systemd
        # sudo sh -c "echo '{\"exec-opts\": [\"native.cgroupdriver=systemd\"]}' > /etc/docker/daemon.json"
        # sudo systemctl restart docker
        ./.github/workflows/cluster-init.sh
    - name: Run integration tests
      run: make integration EXTRA_GO_TEST_FLAGS=-v
    - name: Gather integration coverage results
      uses: codecov/codecov-action@v3
      with:
        file: cover-int.out
        flags: integration-tests
        name: codecov-integration-test-dockerd

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v4
      with:
        go-version: ^${{ env.GO_VERSION }}
        cache: false
    - name: Check-out code
      uses: actions/checkout@v3
    - name: Lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.52

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v3
      with:
        go-version: ^${{ env.GO_VERSION }}
    - uses: actions/checkout@v3
      name: Check out code into the Go module directory
    - name: Build
      run: make dist
    - uses: actions/upload-artifact@v3
      with:
        name: darwin.tgz
        path: bin/darwin.tgz
        retention-days: 1
    - uses: actions/upload-artifact@v3
      with:
        name: linux.tgz
        path: bin/linux.tgz
        retention-days: 1
    - uses: actions/upload-artifact@v3
      with:
        name: windows.tgz
        path: bin/windows.tgz
        retention-days: 1
